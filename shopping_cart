import json

# Base Product Class
class Product:
    def __init__(self, product_id, name, price, quantity_available):
        self._product_id = product_id
        self._name = name
        self._price = price
        self._quantity_available = quantity_available

    @property
    def product_id(self):
        return self._product_id

    @property
    def name(self):
        return self._name

    @property
    def price(self):
        return self._price

    @property
    def quantity_available(self):
        return self._quantity_available

    @quantity_available.setter
    def quantity_available(self, value):
        if value >= 0:
            self._quantity_available = value

    def decrease_quantity(self, amount):
        if 0 < amount <= self._quantity_available:
            self._quantity_available -= amount
            return True
        return False

    def increase_quantity(self, amount):
        if amount > 0:
            self._quantity_available += amount

    def display_details(self):
        return f"{self.product_id}: {self.name} - ₹{self.price} ({self.quantity_available} in stock)"

    def to_dict(self):
        return {
            'type': 'product',
            'product_id': self.product_id,
            'name': self.name,
            'price': self.price,
            'quantity_available': self.quantity_available
        }

# Physical Product Class
class PhysicalProduct(Product):
    def __init__(self, product_id, name, price, quantity_available, weight):
        super().__init__(product_id, name, price, quantity_available)
        self._weight = weight

    @property
    def weight(self):
        return self._weight

    def display_details(self):
        return f"{self.product_id}: {self.name} - ₹{self.price}, Weight: {self.weight}kg ({self.quantity_available} in stock)"

    def to_dict(self):
        data = super().to_dict()
        data.update({'type': 'physical', 'weight': self.weight})
        return data

# Digital Product Class
class DigitalProduct(Product):
    def __init__(self, product_id, name, price, quantity_available, download_link):
        super().__init__(product_id, name, price, quantity_available)
        self._download_link = download_link

    @property
    def download_link(self):
        return self._download_link

    def display_details(self):
        return f"{self.product_id}: {self.name} - ₹{self.price}, Download: {self.download_link}"

    def to_dict(self):
        data = super().to_dict()
        data.update({'type': 'digital', 'download_link': self.download_link})
        return data

# CartItem Class
class CartItem:
    def __init__(self, product, quantity):
        self._product = product
        self._quantity = quantity

    @property
    def product(self):
        return self._product

    @property
    def quantity(self):
        return self._quantity

    @quantity.setter
    def quantity(self, value):
        if value >= 0:
            self._quantity = value

    def calculate_subtotal(self):
        return self.product.price * self.quantity

    def __str__(self):
        return f"Item: {self.product.name}, Quantity: {self.quantity}, Price: ₹{self.product.price}, Subtotal: ₹{self.calculate_subtotal()}"

    def to_dict(self):
        return {
            'product_id': self.product.product_id,
            'quantity': self.quantity
        }

# ShoppingCart Class
class ShoppingCart:
    def __init__(self, product_catalog_file='products.json', cart_state_file='cart.json'):
        self._items = {}
        self._product_catalog_file = product_catalog_file
        self._cart_state_file = cart_state_file
        self.catalog = self._load_catalog()
        self._load_cart_state()

    def _load_catalog(self):
        try:
            with open(self._product_catalog_file, 'r') as f:
                data = json.load(f)
                catalog = {}
                for item in data:
                    product_type = item.pop('type', 'product')
                    if product_type == 'physical':
                        product = PhysicalProduct(**item)
                    elif product_type == 'digital':
                        product = DigitalProduct(**item)
                    else:
                        product = Product(**item)
                    catalog[product.product_id] = product
                return catalog
        except FileNotFoundError:
            return {}

    def _load_cart_state(self):
        try:
            with open(self._cart_state_file, 'r') as f:
                data = json.load(f)
                for item in data:
                    product = self.catalog.get(item['product_id'])
                    if product:
                        self._items[product.product_id] = CartItem(product, item['quantity'])
        except FileNotFoundError:
            pass

    def _save_catalog(self):
        with open(self._product_catalog_file, 'w') as f:
            json.dump([prod.to_dict() for prod in self.catalog.values()], f, indent=2)

    def _save_cart_state(self):
        with open(self._cart_state_file, 'w') as f:
            json.dump([item.to_dict() for item in self._items.values()], f, indent=2)

    def add_item(self, product_id, quantity):
        product = self.catalog.get(product_id)
        if product and product.quantity_available >= quantity:
            if product_id in self._items:
                self._items[product_id].quantity += quantity
            else:
                self._items[product_id] = CartItem(product, quantity)
            product.decrease_quantity(quantity)
            self._save_cart_state()
            return True
        return False

    def remove_item(self, product_id):
        if product_id in self._items:
            quantity = self._items[product_id].quantity
            self.catalog[product_id].increase_quantity(quantity)
            del self._items[product_id]
            self._save_cart_state()
            return True
        return False

    def update_quantity(self, product_id, new_quantity):
        if product_id not in self._items or new_quantity < 0:
            return False
        current_item = self._items[product_id]
        diff = new_quantity - current_item.quantity
        if diff > 0 and self.catalog[product_id].quantity_available >= diff:
            current_item.quantity = new_quantity
            self.catalog[product_id].decrease_quantity(diff)
        elif diff < 0:
            current_item.quantity = new_quantity
            self.catalog[product_id].increase_quantity(-diff)
        else:
            return False
        self._save_cart_state()
        return True

    def get_total(self):
        return sum(item.calculate_subtotal() for item in self._items.values())

    def display_cart(self):
        if not self._items:
            print("Your cart is empty.")
        else:
            for item in self._items.values():
                print(item)
            print(f"Grand Total: ₹{self.get_total()}")

    def display_products(self):
        for product in self.catalog.values():
            print(product.display_details())

# Console UI
def run():
    cart = ShoppingCart()
    while True:
        print("\n=== Online Shopping Cart ===")
        print("1. View Products")
        print("2. Add Item to Cart")
        print("3. View Cart")
        print("4. Update Quantity")
        print("5. Remove Item")
        print("6. Checkout (Dummy)")
        print("7. Exit")
        choice = input("Choose an option: ")

        if choice == '1':
            cart.display_products()
        elif choice == '2':
            pid = input("Enter product ID: ")
            try:
                qty = int(input("Enter quantity: "))
                if cart.add_item(pid, qty):
                    print("Item added successfully!")
                else:
                    print("Failed to add item. Check stock or product ID.")
            except ValueError:
                print("Invalid quantity.")
        elif choice == '3':
            cart.display_cart()
        elif choice == '4':
            pid = input("Enter product ID: ")
            try:
                qty = int(input("Enter new quantity: "))
                if cart.update_quantity(pid, qty):
                    print("Quantity updated.")
                else:
                    print("Failed to update.")
            except ValueError:
                print("Invalid quantity.")
        elif choice == '5':
            pid = input("Enter product ID to remove: ")
            if cart.remove_item(pid):
                print("Item removed.")
            else:
                print("Item not found.")
        elif choice == '6':
            print("Checkout complete. Thank you for shopping!")
            break
        elif choice == '7':
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Try again.")

if __name__ == "__main__":
    run()
